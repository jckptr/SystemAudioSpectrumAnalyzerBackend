cmake_minimum_required(VERSION 3.10.0)
project(SystemAudioSpectrumAnalyzerBackend VERSION 0.1.0 LANGUAGES C CXX)

set(TARGET_NAME "sasa-backend")

message(STATUS "System name: ${CMAKE_SYSTEM_NAME}")
if(NOT (CMAKE_SYSTEM_NAME MATCHES "Windows"
         OR CMAKE_SYSTEM_NAME MATCHES "Linux"
         OR CMAKE_SYSTEM_NAME MATCHES "Darwin"))
    message(FATAL_ERROR "Unsupported system: ${CMAKE_SYSTEM_NAME}")
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(FFTW3_DIR "C:/Program Files/fftw/lib/cmake/fftw3")
    set(FFTW3_INCLUDE_DIR "C:/Program Files/fftw/include")
    set(FFTW3_LIBRARY_DIR "C:/Program Files/fftw/lib")
    set(RtAudio_DIR "C:/Program Files (x86)/RtAudio/share/rtaudio3")
    set(RtAudio_INCLUDE_DIR "C:/Program Files (x86)/RtAudio/include;C:/Program Files (x86)/RtAudio/include/rtaudio")
    set(RtAudio_LIBRARY_DIR "C:/Program Files (x86)/RtAudio/lib")
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(FFTW3_DIR "/usr/local/lib/cmake/fftw3")
    set(FFTW3_INCLUDE_DIR "/usr/local/include")
    set(FFTW3_LIBRARY_DIR "/usr/local/lib")
    set(RtAudio_DIR "/usr/local/share/rtaudio")
    set(RtAudio_INCLUDE_DIR "/usr/local/include;/usr/local/include/rtaudio")
    set(RtAudio_LIBRARY_DIR "/usr/local/lib")
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin") # auto generated by copilot, i do not know if it is correct
    set(FFTW3_DIR "/usr/local/Cellar/fftw/3.3.10_1/lib/cmake/fftw3")
    set(FFTW3_INCLUDE_DIR "/usr/local/Cellar/fftw/3.3.10_1/include")
    set(FFTW3_LIBRARY_DIR "/usr/local/Cellar/fftw/3.3.10_1/lib")
    set(RtAudio_DIR "/usr/local/Cellar/rtaudio/5.1.0/lib/cmake/RtAudio")
    set(RtAudio_INCLUDE_DIR "/usr/local/Cellar/rtaudio/5.1.0/include")
    set(RtAudio_LIBRARY_DIR "/usr/local/Cellar/rtaudio/5.1.0/lib")
endif()


message(STATUS "Looking for FFTW3")
find_package(FFTW3 QUIET)
if(FFTW3_FOUND)
    message(STATUS "FFTW3 is found via find_package.")
else()
    message(STATUS "FFTW3 is not found via find_package. Try it manually.")

    message(STATUS "find_path(FFTW3_INCLUDE_DIR)")
    find_path(FFTW3_INCLUDE_DIRS
        NAMES fftw3.h
        PATHS ${FFTW3_INCLUDE_DIR}
    )
    if(NOT FFTW3_INCLUDE_DIRS OR FFTW3_INCLUDE_DIRS STREQUAL "FFTW3_INCLUDE_DIRS-NOTFOUND")
        message(FATAL_ERROR "FFTW3 includes is not found.")
    endif()

    message(STATUS "find_library(FFTW3_LIBRARIES)")
    find_library(FFTW3_LIBRARIES
        NAMES fftw3
        PATHS ${FFTW3_LIBRARY_DIR})
    if(NOT FFTW3_LIBRARIES)
        message(FATAL_ERROR "FFTW3 library is not found.")
    endif()
endif()
message(STATUS "Include directory: ${FFTW3_INCLUDE_DIRS}")
message(STATUS "Library: ${FFTW3_LIBRARIES}")
message(STATUS "FFTW3 is found.")


set(RtAudio_MANUALLY OFF)
message(STATUS "Looking for RtAudio")
find_package(RtAudio QUIET)
if(RtAudio_FOUND)
    message(STATUS "RtAudio is found via find_package.")
    get_target_property(RtAudio_INCLUDE_DIRS RtAudio::rtaudio INTERFACE_INCLUDE_DIRECTORIES)
    get_target_property(RtAudio_LIBRARIES RtAudio::rtaudio LOCATION)
else()
    message(STATUS "RtAudio is not found via find_package. Try it manually.")

    message(STATUS "find_path(RtAudio_INCLUDE_DIR)")
    find_path(RtAudio_INCLUDE_DIRS
        NAMES RtAudio.h
        PATHS ${RtAudio_INCLUDE_DIR}/rtaudio
    )
    if(NOT RtAudio_INCLUDE_DIRS OR RtAudio_INCLUDE_DIRS STREQUAL "RtAudio_INCLUDE_DIRS-NOTFOUND")
        message(FATAL_ERROR "RtAudio includes is not found.")
    endif()

    message(STATUS "find_library(RtAudio_LIBRARY_DIR)")
    find_library(RtAudio_LIBRARIES
        NAMES rtaudio
        PATHS ${RtAudio_LIBRARY_DIR})
    if(NOT RtAudio_LIBRARY)
        message(FATAL_ERROR "RtAudio library is not found.")
    endif()

    set(RtAudio_MANUALLY ON)
endif()
message(STATUS "Include directory: ${RtAudio_INCLUDE_DIRS}")
message(STATUS "Library: ${RtAudio_LIBRARIES}")
message(STATUS "RtAudio is found.")


add_executable(${TARGET_NAME} ./src/main.cpp) # AudioSpectrumAnalyzer.cpp)


target_include_directories(${TARGET_NAME} PRIVATE ${FFTW3_INCLUDE_DIRS})
target_link_libraries(${TARGET_NAME} PRIVATE ${FFTW3_LIBRARIES})

if(RtAudio_MANUALLY)
    target_include_directories(${TARGET_NAME} PRIVATE ${RtAudio_INCLUDE_DIRS})
    target_link_libraries(${TARGET_NAME} PRIVATE ${RtAudio_LIBRARIES})
else()
    target_link_libraries(${TARGET_NAME} PRIVATE RtAudio::rtaudio)
endif()

